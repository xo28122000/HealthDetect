{"version":3,"sources":["components/Login.js","components/HealthProblemSelector.js","serviceWorker.js","index.js","App.js"],"names":["Login","state","className","style","minHeight","height","id","position","top","left","right","width","background","paddingTop","paddingBottom","borderRadius","Form","FormGroup","Label","for","Input","type","name","placeholder","Button","outline","color","onClick","window","location","href","Component","addresses","Atelectasis","Pneumonia","HealthProblemSelector","selected","problemlist","required","code","that","this","rendercards","map","problem","key","flex","e","setState","Card","margin","cursor","CardBody","CardTitle","CardText","toggle","modal","setLoading","loading","display","justifyContent","flexWrap","marginTop","marginBottom","onSubmit","ev","preventDefault","f","document","getElementById","files","alert","r","FileReader","onload","bas64","target","result","console","log","slice","fetch","method","headers","Accept","body","JSON","stringify","binImg","then","response","json","data","message","setDisease","Object","values","toFixed","catch","readAsDataURL","accept","paddingLeft","paddingRight","Modal","isOpen","backdrop","ModalHeader","ModalBody","ModalFooter","Boolean","hostname","match","ReactDOM","render","useState","setIsOpen","Navbar","light","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","path","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iZAiEeA,E,2MA9DbC,MAAQ,G,wEAMN,OACE,yBAAKC,UAAU,YAAYC,MAAO,CAAEC,UAAW,OAAQC,OAAQ,SAC7D,yBACEC,GAAG,mBACHH,MAAO,CACLI,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,MAAO,MAGPC,MAAO,MACPN,OAAQ,UAGV,yBACEH,UAAU,YACVC,MAAO,CACLS,WAAY,UACZC,WAAY,OACZC,cAAe,OACfC,aAAc,SAGhB,kBAACC,EAAA,EAAD,KACE,wDACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,gBAAX,SACA,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,QACLhB,GAAG,eACHiB,YAAY,wBAGhB,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,mBAAX,YACA,kBAACC,EAAA,EAAD,CACEC,KAAK,WACLC,KAAK,WACLhB,GAAG,kBACHiB,YAAY,0BAIhB,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,UAAUC,QAjDxB,WAEhBC,OAAOC,SAASC,KAAO,YA+Cf,kB,GApDMC,a,gECadC,EAAY,CAChB,cAAe,gCACfC,YAAa,kDACb,kBAAmB,kDACnB,6BACE,kDACFC,UAAW,iCA2LEC,E,YAvLb,aAAe,IAAD,8BACZ,+CACKlC,MAAQ,CACXmC,UAAU,EACVC,YAAa,CACX,CACEf,KAAM,6BACNgB,SAAU,oBACVC,KAAM,MAER,CACEjB,KAAM,cACNgB,SAAU,2BACVC,KAAM,MAER,CAAEjB,KAAM,kBAAmBgB,SAAU,eAAgBC,KAAM,MAC3D,CAAEjB,KAAM,cAAegB,SAAU,oBAAqBC,KAAM,MAC5D,CAAEjB,KAAM,YAAagB,SAAU,qBAAsBC,KAAM,MAC3D,CAAEjB,KAAM,kBAAmBgB,SAAU,YAAaC,KAAM,QAlBhD,E,sEAuBJ,IAAD,OAIDC,EAAOC,KAAKxC,MACdyC,EAAcD,KAAKxC,MAAMoC,YAAYM,KAAI,SAASC,GACpD,OACE,yBACEC,IAAKD,EAAQtB,KACbnB,MAAO,CAAE2C,KAAM,SACfnB,QAAS,kBATKoB,EASaH,OAR/B,EAAKI,SAAS,CAAEZ,SAAUW,IADR,IAAAA,IAWd,kBAACE,EAAA,EAAD,CACE/C,UAAS,WACPsC,EAAKJ,SAASd,OAASsB,EAAQtB,KAAO,WAAa,iBAErDnB,MAAO,CAAE+C,OAAQ,MAAOC,OAAQ,UAAWpC,aAAc,QAEzD,kBAACqC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,gCAAMT,EAAQtB,OAEhB,kBAACgC,EAAA,EAAD,KACE,yCAAeV,EAAQN,iBAQ7BiB,EAAS,kBAAM,EAAKP,SAAS,CAAEQ,OAAQ,EAAKvD,MAAMuD,SAClDC,EAAa,SAAAV,GAAC,OAAI,EAAKC,SAAS,CAAEU,QAASX,KAsDjD,OACE,yBACE5C,MAAO,CACLwD,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACVC,UAAW,OACXC,aAAc,SAGhB,wBAAI5D,MAAO,CAAE+C,OAAQ,OAAQa,aAAc,SAA3C,gDAGA,0BAAMC,SAlEO,SAAAC,GACfA,EAAGC,iBACH,IAEIC,EAFgBC,SAASC,eAAe,iBAAiBC,MAAM,GAGnE,IAAKH,EAAG,OAAOI,MAAM,uBACrBd,GAAW,GACX,IAAIe,EAAI,IAAIC,WAEZD,EAAEE,OAAS,SAAS3B,GAClB,IAAI4B,EAEJA,EADgB5B,EAAE6B,OAAOC,OAEzBC,QAAQC,IAAI/C,EAAUQ,EAAKJ,SAASd,OAEpCwD,QAAQC,IAAIJ,EAAMK,MAAM,KACxBC,MAAMjD,EAAUQ,EAAKJ,SAASd,MAAO,CACnC4D,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQb,EACRtD,KAAMmB,EAAKJ,SAASG,SAGrBkD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJrC,IACAE,GAAW,GACXqB,QAAQC,IAAIa,GAlCD,SAAA7C,GAAK,EAAKC,SAAS,CAAE6C,QAAS9C,IAmCzC+C,CAAW,GAAD,OAENF,EAAK,cACD,sDADJ,yBAEsBpD,EAAKJ,SAASd,KAFpC,cAG+B,IAAzByE,OAAOC,OAAOJ,GAAM,IACpBK,QAAQ,GAJd,uBAQLC,OAAM,SAAAjC,GACLR,GAAW,GACXc,MACE,+DAEFO,QAAQC,IAAId,OAIlBO,EAAE2B,cAAchC,KAgBZ,yBACEhE,MAAO,CACLwD,QAAS,OACTE,SAAU,OACVD,eAAgB,WAGjBlB,GAEH,yBAAKxC,UAAU,cAAcC,MAAO,CAAE2D,UAAW,SAC/C,2BACEzC,KAAK,OACLnB,UAAU,oBACVI,GAAG,gBACH8F,OAAO,UACP9E,KAAK,UAENmB,KAAKxC,MAAMmC,UACV,6BACE,2BACElC,UAAU,oBACVC,MAAO,CAAEgD,OAAQ,YAEjB,sDAEF,yBACEhD,MAAO,CACL2D,UAAW,OACXH,QAAS,OACTC,eAAgB,WAGlB,kBAACpC,EAAA,EAAD,CACEC,SAAO,EACPC,MAAM,UACNL,KAAK,SACLnB,UAAU,MACVC,MAAO,CAAEkG,YAAa,QAASC,aAAc,UAE5C7D,KAAKxC,MAAMyD,QAAU,aAAe,cAOjD,kBAAC6C,EAAA,EAAD,CAAOC,OAAQ/D,KAAKxC,MAAMuD,MAAOD,OAAQA,EAAQkD,SAAS,UACxD,kBAACC,EAAA,EAAD,CAAanD,OAAQA,GAArB,UACA,kBAACoD,EAAA,EAAD,KAAYlE,KAAKxC,MAAM4F,SACvB,kBAACe,EAAA,EAAD,KACE,kBAACpF,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,UAAUC,QAAS4B,GAAzC,e,GA9KwBxB,aCZhB8E,QACW,cAA7BjF,OAAOC,SAASiF,UAEe,UAA7BlF,OAAOC,SAASiF,UAEhBlF,OAAOC,SAASiF,SAASC,MACvB,2DCXNC,IAASC,OAAO,mBCaD,WAAgB,IAAD,EACAC,oBAAS,GADT,mBACrBV,EADqB,KACbW,EADa,KAI5B,OACE,kBAAC,IAAD,KACE,yBAAKhH,MAAO,CAAES,WAAY,GAAIP,OAAQ,UACpC,kBAAC+G,EAAA,EAAD,CACE1F,MAAM,QACN2F,OAAK,EACLC,OAAO,KACPnH,MAAO,CAAES,WAAY,2BAErB,kBAAC2G,EAAA,EAAD,CAAazF,KAAK,KAAlB,gBACA,kBAAC0F,EAAA,EAAD,CAAe7F,QAXR,kBAAMwF,GAAWX,MAYxB,kBAACiB,EAAA,EAAD,CAAUjB,OAAQA,EAAQkB,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKzH,UAAU,UAAUwH,QAAM,MAQnC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YD9CI,MAASxD,SAASC,eAAe,SD4H3C,kBAAmBwD,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.5597e181.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\nclass Login extends Component {\n  state = {};\n  render() {\n    const oncSubmit = () => {\n      //  do verification here\n      window.location.href = \"/select\";\n    };\n    return (\n      <div className=\"container\" style={{ minHeight: \"90vh\", height: \"90vh\" }}>\n        <div\n          id=\"centerdivElement\"\n          style={{\n            position: \"absolute\",\n            top: \"30%\",\n            left: \"20%\",\n            right: \"20%\",\n\n            // marginLeft: \"-50px\",\n            width: \"60%\",\n            height: \"100px\"\n          }}\n        >\n          <div\n            className=\"container\"\n            style={{\n              background: \"#cae7f3\",\n              paddingTop: \"50px\",\n              paddingBottom: \"50px\",\n              borderRadius: \"20px\"\n            }}\n          >\n            <Form>\n              <h3>Please Log In or Sign Up</h3>\n              <FormGroup>\n                <Label for=\"exampleEmail\">Email</Label>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"exampleEmail\"\n                  placeholder=\"with a placeholder\"\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"examplePassword\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"examplePassword\"\n                  placeholder=\"password placeholder\"\n                />\n              </FormGroup>\n\n              <Button outline color=\"primary\" onClick={oncSubmit}>\n                Submit\n              </Button>\n            </Form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport {\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from \"reactstrap\";\n\nconst addresses = {\n  \"Brain Tumor\": \"http://127.0.0.1:5000/predict\",\n  Atelectasis: \"https://hackdavis-2020-265606.appspot.com/image\",\n  \"Finger Fracture\": \"https://hackdavis-2020-265606.appspot.com/image\",\n  \"Lung Effusion/Infiltration\":\n    \"https://hackdavis-2020-265606.appspot.com/image\",\n  Pneumonia: \"http://127.0.0.1:5000/predict\"\n};\n\nclass HealthProblemSelector extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selected: false,\n      problemlist: [\n        {\n          name: \"Lung Effusion/Infiltration\",\n          required: \"Lung Scan (X-Ray)\",\n          code: \"le\"\n        },\n        {\n          name: \"Brain Tumor\",\n          required: \"Brain Scan (X-Ray or CT)\",\n          code: \"bt\"\n        },\n        { name: \"Finger Fracture\", required: \"Hand (X-Ray)\", code: \"ff\" },\n        { name: \"Atelectasis\", required: \"Lung Scan (X-Ray)\", code: \"at\" },\n        { name: \"Pneumonia\", required: \"Chest Scan (X-Ray)\", code: \"pn\" },\n        { name: \"Cervical Cancer\", required: \"Pap Smear\", code: \"ps\" }\n      ]\n    };\n  }\n\n  render() {\n    const setSelected = e => {\n      this.setState({ selected: e });\n    };\n    const that = this.state;\n    var rendercards = this.state.problemlist.map(function(problem) {\n      return (\n        <div\n          key={problem.name}\n          style={{ flex: \"0 50%\" }}\n          onClick={() => setSelected(problem)}\n        >\n          <Card\n            className={` ${\n              that.selected.name === problem.name ? \"selected\" : \"blue-on-hover\"\n            }`}\n            style={{ margin: \"5px\", cursor: \"pointer\", borderRadius: \"8px\" }}\n          >\n            <CardBody>\n              <CardTitle>\n                <h3> {problem.name}</h3>\n              </CardTitle>\n              <CardText>\n                <em>Requires: {problem.required}</em>\n              </CardText>\n            </CardBody>\n          </Card>\n        </div>\n      );\n    });\n    const setDisease = e => this.setState({ message: e });\n    const toggle = () => this.setState({ modal: !this.state.modal });\n    const setLoading = e => this.setState({ loading: e });\n    const onSubmit = ev => {\n      ev.preventDefault();\n      var validatedFile = document.getElementById(\"validatedFile\").files[0];\n\n      var f = validatedFile;\n      if (!f) return alert(\"Please add an image\");\n      setLoading(true);\n      var r = new FileReader();\n\n      r.onload = function(e) {\n        var bas64;\n        var base64Img = e.target.result;\n        bas64 = base64Img;\n        console.log(addresses[that.selected.name]);\n\n        console.log(bas64.slice(22));\n        fetch(addresses[that.selected.name], {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            binImg: bas64,\n            type: that.selected.code\n          })\n        })\n          .then(response => response.json())\n          .then(data => {\n            toggle();\n            setLoading(false);\n            console.log(data);\n            setDisease(\n              `${\n                data[\"No Finding\"]\n                  ? \"We couldn't find any medical problems in this image\"\n                  : `You might have ${that.selected.name} (${(\n                      Object.values(data)[0] * 100\n                    ).toFixed(1)}% probability)`\n              }`\n            );\n          })\n          .catch(ev => {\n            setLoading(false);\n            alert(\n              \"There was an error with your image. Please try again later.\"\n            );\n            console.log(ev);\n          });\n      };\n\n      r.readAsDataURL(f);\n    };\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexWrap: \"wrap\",\n          marginTop: \"30px\",\n          marginBottom: \"50px\"\n        }}\n      >\n        <h1 style={{ margin: \"20px\", marginBottom: \"40px\" }}>\n          What ailments would you like to check today?\n        </h1>\n        <form onSubmit={onSubmit}>\n          <div\n            style={{\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              justifyContent: \"center\"\n            }}\n          >\n            {rendercards}\n          </div>\n          <div className=\"custom-file\" style={{ marginTop: \"20px\" }}>\n            <input\n              type=\"file\"\n              className=\"custom-file-input\"\n              id=\"validatedFile\"\n              accept=\"image/*\"\n              name=\"photo\"\n            />\n            {this.state.selected && (\n              <div>\n                <label\n                  className=\"custom-file-label\"\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <em>Upload images here...</em>\n                </label>\n                <div\n                  style={{\n                    marginTop: \"20px\",\n                    display: \"flex\",\n                    justifyContent: \"center\"\n                  }}\n                >\n                  <Button\n                    outline\n                    color=\"primary\"\n                    type=\"submit\"\n                    className=\"btn\"\n                    style={{ paddingLeft: \"100px\", paddingRight: \"100px\" }}\n                  >\n                    {this.state.loading ? \"Loading...\" : \"Submit\"}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </form>\n        <Modal isOpen={this.state.modal} toggle={toggle} backdrop=\"static\">\n          <ModalHeader toggle={toggle}>Result</ModalHeader>\n          <ModalBody>{this.state.message}</ModalBody>\n          <ModalFooter>\n            <Button outline color=\"primary\" onClick={toggle}>\n              Done\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default HealthProblemSelector;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport React, { useState } from \"react\";\nimport './App.css'\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from \"reactstrap\";\nimport Login from \"./components/Login\";\nimport HealthProblemSelector from \"./components/HealthProblemSelector\";\n\nexport default function App() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <Router>\n      <div style={{ background: \"\", height: \"100vh\" }}>\n        <Navbar\n          color=\"black\"\n          light\n          expand=\"md\"\n          style={{ background: \"rgba(201, 231, 242, 1)\" }}\n        >\n          <NavbarBrand href=\"/\">HealthDetect</NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              {/* <NavItem>\n                <NavLink href=\"/login\">login</NavLink>\n              </NavItem> */}\n            </Nav>\n          </Collapse>\n        </Navbar>\n\n        <Switch>\n          <Route path=\"/select\">\n            <HealthProblemSelector />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n\n          <Route path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}