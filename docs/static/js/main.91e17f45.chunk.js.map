{"version":3,"sources":["components/Login.js","components/About.js","components/HealthProblemSelector.js","serviceWorker.js","index.js","App.js"],"names":["Login","state","className","style","minHeight","height","id","position","top","left","right","width","background","borderRadius","paddingBottom","Form","paddingTop","FormGroup","Label","for","Input","type","name","placeholder","Button","outline","color","onClick","window","location","href","Component","About","display","justifyContent","maxWidth","textAlign","margin","src","addresses","Atelectasis","HealthProblemSelector","selected","problemlist","required","code","related","that","this","rendercards","map","problem","key","flex","e","setState","Card","cursor","CardBody","CardTitle","CardText","toggle","modal","setLoading","loading","flexWrap","marginTop","marginBottom","onSubmit","ev","preventDefault","f","document","getElementById","files","alert","r","FileReader","onload","bas64","target","result","console","log","slice","fetch","method","headers","Accept","body","JSON","stringify","binImg","then","response","json","data","s","Object","values","toFixed","message","setDisease","catch","readAsDataURL","accept","paddingLeft","paddingRight","Modal","isOpen","backdrop","ModalHeader","ModalBody","ModalFooter","Boolean","hostname","match","ReactDOM","render","useState","setIsOpen","Navbar","light","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","path","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91e17f45.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\nclass Login extends Component {\r\n  state = {};\r\n  render() {\r\n    const oncSubmit = () => {\r\n      //  do verification here\r\n      window.location.href = \"/select\";\r\n    };\r\n    return (\r\n      <div className=\"container\" style={{ minHeight: \"90vh\", height: \"90vh\" }}>\r\n        <div\r\n          id=\"centerdivElement\"\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"30%\",\r\n            left: \"20%\",\r\n            right: \"20%\",\r\n\r\n            // marginLeft: \"-50px\",\r\n            width: \"60%\",\r\n            height: \"100px\"\r\n          }}\r\n        >\r\n          <div\r\n            className=\"container shadow\"\r\n            style={{\r\n              background: \"#cae7f3\",\r\n              borderRadius: \"8px\",\r\n              paddingBottom: '25px'\r\n            }}\r\n          >\r\n            <Form>\r\n              <h3 style={{paddingTop: '25px', paddingBottom: '25px'}}>Log In</h3>\r\n              <FormGroup>\r\n                <Label for=\"exampleEmail\">Email</Label>\r\n                <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"exampleEmail\"\r\n                  placeholder=\"Enter your email...\"\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"examplePassword\">Password</Label>\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"examplePassword\"\r\n                  placeholder=\"Enter your password...\"\r\n                />\r\n              </FormGroup>\r\n\r\n              <Button outline color=\"primary\" onClick={oncSubmit}>\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react'\r\n\r\nconst About = () => <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n    <div style={{ maxWidth: '800px', textAlign: 'left', margin: '25px' }}>\r\n        <h1>About HealthDetect®</h1>\r\n        <hr></hr>\r\n        <p>\r\n            Firefox can’t establish a connection to the server at localhost:3000.\r\n            The site could be temporarily unavailable or too busy. Try again in a few moments.\r\n            If you are unable to load any pages, check your computer’s network connection.\r\n            If your computer or network is protected by a firewall or proxy, make sure that Firefox is permitted to access the Web.\r\n        </p>\r\n        <div style={{ textAlign: 'center' }}>\r\n            <img src=\"https://assets.aboutkidshealth.ca/akhassets/BT_Neuro_MRI2_MEDIMG-PHO_EN.jpg?RenditionID=10\" />\r\n        </div>\r\n        <p>\r\n            Firefox can’t establish a connection to the server at localhost:3000.\r\n            The site could be temporarily unavailable or too busy. Try again in a few moments.\r\n            If you are unable to load any pages, check your computer’s network connection.\r\n            If your computer or network is protected by a firewall or proxy, make sure that Firefox is permitted to access the Web.\r\n        </p>\r\n        <p>\r\n            We wrote stuff in Python and Node.js\r\n        </p>\r\n\r\n    </div>\r\n</div>\r\n\r\nexport default About","import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\n\r\nconst addresses = {\r\n  \"Brain Tumor\": \"http://127.0.0.1:5000/predict\",\r\n  Atelectasis: \"https://hackdavis-2020-265606.appspot.com/image\",\r\n  \"Finger Fracture\": \"https://hackdavis-2020-265606.appspot.com/image\", \r\n  \"Lung Effusion/Infiltration\":\r\n    \"https://hackdavis-2020-265606.appspot.com/image\",\r\n    \"Pneumonia\": \"http://127.0.0.1:5000/predict\"\r\n};\r\n\r\nclass HealthProblemSelector extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      selected: false,\r\n      problemlist: [\r\n        { name: \"Lung Effusion/Infiltration\", required: \"Lung Scan (X-Ray)\", code: 'le', related: \"Pneumonia\"},\r\n        { name: \"Brain Tumor\", required: \"Brain Scan (X-Ray or CT)\", code: 'bt'},\r\n        // { name: \"Finger Fracture\", required: \"Hand (X-Ray)\", code: 'ff' },\r\n        // { name: \"Atelectasis\", required: \"Lung Scan (X-Ray)\", code: 'at' },\r\n        { name: \"Pneumonia\", required: \"Chest Scan (X-Ray)\", code: 'pn', related: \"Lung Effusion/Infiltration\"},\r\n        { name: \"Cervical Cancer\", required: \"Pap Smear\", code: 'ps'}\r\n      ]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const setSelected = e => {\r\n      this.setState({ selected: e });\r\n    };\r\n    const that = this.state;\r\n    var rendercards = this.state.problemlist.map(function(problem) {\r\n      return (\r\n        <div\r\n          key={problem.name}\r\n          style={{ flex: \"0 50%\" }}\r\n          onClick={() => setSelected(problem)}\r\n        >\r\n          <Card\r\n            className={` ${\r\n              that.selected.name === problem.name ? \"selected\" : \"blue-on-hover\"\r\n            }`}\r\n            style={{ margin: \"5px\", cursor: \"pointer\", borderRadius: \"8px\" }}\r\n          >\r\n            <CardBody>\r\n              <CardTitle>\r\n                <h3> {problem.name}</h3>\r\n              </CardTitle>\r\n              <CardText>\r\n                <em>Requires: {problem.required}</em>\r\n              </CardText>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      );\r\n    });\r\n    const setDisease = e => this.setState({ message: e });\r\n    const toggle = () => this.setState({ modal: !this.state.modal });\r\n    const setLoading = e => this.setState({ loading: e });\r\n    const onSubmit = ev => {\r\n      ev.preventDefault();\r\n      var validatedFile = document.getElementById(\"validatedFile\").files[0];\r\n\r\n      var f = validatedFile;\r\n      if (!f) return alert(\"Please add an image\");\r\n      setLoading(true);\r\n      var r = new FileReader();\r\n\r\n      r.onload = function(e) {\r\n        var bas64;\r\n        var base64Img = e.target.result;\r\n        bas64 = base64Img;\r\n        console.log(addresses[that.selected.name]);\r\n\r\n        console.log(bas64.slice(22));\r\n        fetch(addresses[that.selected.name], {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            binImg: bas64,\r\n            type: that.selected.code\r\n          })\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            toggle();\r\n            setLoading(false);\r\n            console.log(data);\r\n            let s = `${\r\n              data[\"No Finding\"]\r\n                ? \"We couldn't find any medical problems in this image. \"\r\n                : `You might have ${that.selected.name} (${(\r\n                    Object.values(data)[0] * 100\r\n                  ).toFixed(1)}% probability). `\r\n            }`\r\n            if(that.selected.related)\r\n              s += `You may also want to consider screening for ${that.selected.related}.`\r\n            setDisease(\r\n              s\r\n            );\r\n          })\r\n          .catch(ev => {\r\n            setLoading(false);\r\n            alert(\r\n              \"There was an error with your image. Please try again later.\"\r\n            );\r\n            console.log(ev);\r\n          });\r\n      };\r\n\r\n      r.readAsDataURL(f);\r\n    };\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          flexWrap: \"wrap\",\r\n          marginTop: \"30px\",\r\n          marginBottom: '50px'\r\n        }}\r\n      >\r\n        <h1 style={{ margin: \"20px\", marginBottom: \"40px\" }}>\r\n          What ailments would you like to check today?\r\n        </h1>\r\n        <form onSubmit={onSubmit}>\r\n          <div style={{ display: \"flex\", flexWrap: \"wrap\" , justifyContent: 'center'}}>{rendercards}</div>\r\n          <div className=\"custom-file\" style={{ marginTop: \"20px\" }}>\r\n            <input\r\n              type=\"file\"\r\n              className=\"custom-file-input\"\r\n              id=\"validatedFile\"\r\n              accept=\"image/*\"\r\n              name=\"photo\"\r\n            />\r\n            {this.state.selected && (\r\n              <div>\r\n                <label\r\n                  className=\"custom-file-label\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  <em>Upload images here...</em>\r\n                </label>\r\n                <div\r\n                  style={{\r\n                    marginTop: \"20px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\"\r\n                  }}\r\n                >\r\n                  <Button\r\n                    outline\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    className=\"btn\"\r\n                    style={{ paddingLeft: \"100px\", paddingRight: \"100px\" }}\r\n                  >\r\n                    {this.state.loading ? \"Loading...\" : \"Submit\"}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </form>\r\n        <Modal isOpen={this.state.modal} toggle={toggle} backdrop=\"static\">\r\n          <ModalHeader toggle={toggle}>Result</ModalHeader>\r\n          <ModalBody>{this.state.message}</ModalBody>\r\n          <ModalFooter>\r\n            <Button outline color=\"primary\" onClick={toggle}>\r\n              Done\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HealthProblemSelector;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport React, { useState } from \"react\";\r\nimport './App.css'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\nimport Login from \"./components/Login\";\r\nimport About from './components/About'\r\nimport HealthProblemSelector from \"./components/HealthProblemSelector\";\r\n\r\nexport default function App() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n  return (\r\n    <Router>\r\n      <div style={{ background: \"\", height: \"100vh\" }}>\r\n        <Navbar\r\n          color=\"black\"\r\n          light\r\n          expand=\"md\"\r\n          style={{ background: \"rgba(201, 231, 242, 1)\", display: 'flex', justifyContent: 'space-between'}}\r\n        >\r\n          <NavbarBrand href=\"/select\">HealthDetect</NavbarBrand>\r\n          <NavbarToggler onClick={toggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"mr-auto\"  navbar>\r\n              <NavItem>\r\n                <NavLink href=\"/about\">about</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n\r\n        <Switch>\r\n          <Route path=\"/select\">\r\n            <HealthProblemSelector />\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n          <Route path=\"/about\">\r\n            <About />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Login />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n"],"sourceRoot":""}